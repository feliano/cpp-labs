Lab 5: The matrix - Beta

This lab is still under construction but mostly likely things will only be added to the lab.

In this assignment you will implement a matrix class. The matrix shall be implemented with an array (m_vec) which means you need to use some simple arithmetic to access a matrix index (i, j). If the number of rows is only one, the matrix will essentially behave like a vector. Random access to an element should be on average constant O(1). The first element (0, 0) is at m_vec[0].

Appropriate methods shall be declared const

Methods shall throw std::out_of_range if the dimensions do not match the method call

The matrix shall handle necessary memory allocation internally without memory leaks. If the matrix needs to expand, the internal vector must be resized. Use valgrind to verify your code.

template <class T>
class Matris {
public:
   // constructors

   // operators

   // methods

private:
   size_t m_rows;
   size_t m_cols;
   size_t m_capacity;
   T * m_vec;
}

 (Links to an external site.)Constructors and assignment operators

Some of this constructors might seem strange but they are here for you to practice C++.

    It should be possible to construct the matrix with a single number. The matrix created shall be a square matrix with initial elements set to the default element of the type.

   Matris<int> m(3); 
   m [ 0 0 0
       0 0 0
       0 0 0 ]

    It should be possible to default-construct the container, which should be semantically equivalent to matrix(0).

    You should implement a copy-constructor and a destructor. Note modifying a copied matrix should not changed the contents of the copied-from matrix.

    It should not be possible to instantiate the class template unless the specified element type is both moveConstructible and moveAssignable. Use static_assert with an appropriate error message, to make sure that this is the case.

    Appropriate constructors shall be explicit

    You should implement a copy-assignment operator, and although assigning a matrix to itself might seem silly, make sure it is handled correctly.

    Implement a move-constructor and a move-assignment operator taking another matrix potentially of a different size

    Implement a constructor taking std::initializer_list. This constructor can only construct square matrices. If the number of elements is not an even square root std::out_of_range shall be thrown. The first elements defines the first row and then the next rows in sequence

 (Links to an external site.)Accessors

    implement rows() and cols() which returns number of rows and columns respectively

    Implement the function operator to access/modify elements. Make a const version as well.

   Matris<int> m(3);
   m(1, 1) = 3;
   std::cout << m(1, 1);

 (Links to an external site.)Operators

For both scalar and matrix operations:

    Implement * + - which should be chainable

    Implement *= += -= as non chainable.

Writing and reading from stdin and stdout in human friendly (readable) format

    Implement operator<< and operator>> and make them compatible. If you write to a file, you should be able to read the matrix from the same file. The exact format is up to you but do make it human readable (use a line break after each row).

 (Links to an external site.)Methods/functions

    Implement reset() method which sets all elements to the deafult value of the type.

    Implement the function identity(unsigned int) which returns a square identity matrix where all elements but the diagonal are set to 0 and the diagonal values to 1.

Excel inspired methods

    Implement insert_row which inserts a row before a given row number.

    Implement append_row which inserts a row after a given row number.

    Implement remove_row which erases the entire row at a given row number

    Implement insert_column which inserts a column before a given column number.

    Implement append_column which inserts a column after a given column number.

    Implement remove_column which erases the entire column at a given column number

 (Links to an external site.)Optional/mandatory method

If you are working on this assignment before december, do implement the transpose() of a matrix

m.transpose();

                      1 5
1 2 3 4  transposed   2 6
5 6 7 8     ->        3 7
                      4 8

If you have not pushed a tested solution to this assignment before the course ends in december, you shall instead of the transpose() method implement the inverse method which inverses a matrix. Note that only square matrices can have inverses (although not all do) throw std::out_of_range if there is no inverse. If the matrix elements does not support the math to calculate the inverse, a compile error will be given.
 (Links to an external site.)Tests

For each method/function implemented. Implement at least one test (one method call).

Write one(!) informative line to std::cout for each test alternatively use cxx_test for testing
 (Links to an external site.)Questions

Copy inquiry_05.md to 05 sub folder

cp inquiry_05.md 05/inquiry.md

Write your answers in 05/inquiry.md
 (Links to an external site.)How many methods/functions have you implemented?
 (Links to an external site.)How many methods/functions have you tested?
 (Links to an external site.)Why should (some?) constructors be explicit? Explain with a code example.
 (Links to an external site.)What is the benefit of a move-constructor? Explain with a code example.
 (Links to an external site.)Describe how you manage memory when resizing. When do you need to resize?
 (Links to an external site.)Why do you need to implement a const-version of the accessor operator?
 (Links to an external site.)What synonyms, if any, are there for accessor in object oriented programming?
 (Links to an external site.)What was hardest to implement in this assignment?
 (Links to an external site.)
What did you learn from this assignment?